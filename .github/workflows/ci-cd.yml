name: Docker Build and Push

on:
  push:
    branches: [ "main" ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Clean up test directory
      run: |
        find . -name "src" -type d -exec find {} -path "*/test/java" -name "*.java" -type f -delete \;

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Check if secrets are set
      run: |
        if [ -z "${{ secrets.DOCKER_HUB_USERNAME }}" ]; then
          echo "Error: DOCKER_HUB_USERNAME is not set in GitHub secrets"
          echo "Please add DOCKER_HUB_USERNAME to your repository secrets"
          exit 1
        fi
        if [ -z "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" ]; then
          echo "Error: DOCKER_HUB_ACCESS_TOKEN is not set in GitHub secrets"
          echo "Please add DOCKER_HUB_ACCESS_TOKEN to your repository secrets"
          exit 1
        fi
        echo "Both DOCKER_HUB_USERNAME and DOCKER_HUB_ACCESS_TOKEN are properly set"

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: List directory contents
      run: ls -R

    - name: Display Dockerfile contents
      run: |
        if [ -f "jhipster-task-app/.devcontainer/Dockerfile" ]; then
          cat jhipster-task-app/.devcontainer/Dockerfile
        else
          echo "Error: Dockerfile not found at jhipster-task-app/.devcontainer/Dockerfile"
          echo "Current directory structure:"
          ls -R
          exit 1
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./jhipster-task-app
        file: ./jhipster-task-app/.devcontainer/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/5dvtaskimagethelatest
        build-args: |
          VARIANT=17
          INSTALL_MAVEN=true
          INSTALL_GRADLE=true
          NODE_VERSION=20.15.0

    - name: Verify Docker image
      run: |
        docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/5dvtaskimagethelatest
        docker inspect ${{ secrets.DOCKER_HUB_USERNAME }}/5dvtaskimagethelatest

    - name: Run Docker image and capture logs
      run: |
        docker run -d --name test-container -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/5dvtaskimagethelatest
        echo "Waiting for application to start (this may take up to 5 minutes)..."
        for i in {1..30}; do
          if docker logs test-container 2>&1 | grep -q "Started" ; then
            echo "Application started successfully"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Error: Application failed to start within the timeout period"
            docker logs test-container
            exit 1
          fi
          sleep 10
        done

    - name: Check application health
      run: |
        if curl -sf http://localhost:8080/management/health > /dev/null 2>&1; then
          echo "Health check passed"
        else
          echo "Error: Health check failed"
          docker logs test-container
          exit 1
        fi

    - name: Diagnostic information
      if: failure()
      run: |
        echo "Container logs:"
        docker logs test-container || echo "Error: Failed to retrieve logs"
        echo "Container processes:"
        docker top test-container || echo "Error: Failed to retrieve processes"
        echo "Container network:"
        docker network inspect bridge || echo "Error: Failed to inspect network"
        echo "Java version:"
        docker exec test-container java -version || echo "Error: Failed to get Java version"
        echo "Contents of /workspace/app:"
        docker exec test-container ls -la /workspace/app || echo "Error: Failed to list /workspace/app"
        echo "Contents of target directory:"
        docker exec test-container ls -la /workspace/app/target || echo "Error: Failed to list target directory"

    - name: Clean up
      if: always()
      run: docker rm -f test-container || true
